generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String?
  firstName      String
  middleName     String?
  lastName       String
  birthdate      DateTime
  contactNumber  String
  email          String    @unique
  password       String?           // <- optional for OAuth users
  role           Role      @default(CUSTOMER)
  image          String?
  redirectUrl    String?   @default("/guest/dashboard")
  emailVerified  DateTime?
  googleId       String?   @unique  // <- for linking Google OAuth accounts
  resetToken     String?   // for password reset OTP
  resetTokenExpiry DateTime? // expiry time for reset OTP
  bookings       Booking[]
  accounts       Account[]
  sessions       Session[]
  trustedBrowsers TrustedBrowser[]
}

model OTP {
  id             Int      @id @default(autoincrement())
  email          String
  otp            String
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  firstName      String
  middleName     String?
  lastName       String
  birthdate      DateTime
  contactNumber  String
  password       String
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String

  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Room {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  type      RoomType
  price     Int
  createdAt DateTime  @default(now())
  heldUntil DateTime?
  status    String    @default("available")
  updatedAt DateTime  @updatedAt
  image     String?
  quantity  Int       @default(1)
  amenities Amenity[]
  bookings  Booking[]
  defaultAmenities RoomTypeDefaultAmenity[]
}

// Default amenities that come with each room type
model RoomTypeDefaultAmenity {
  id          Int      @id @default(autoincrement())
  roomType    RoomType
  amenityName String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  room        Room?    @relation(fields: [roomId], references: [id])
  roomId      Int?

  @@unique([roomType, amenityName])
}

// Optional amenities that can be added to bookings (with quantity limits)
model OptionalAmenity {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  maxQuantity Int      @default(1) // Maximum quantity per booking
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    BookingOptionalAmenity[]
}

// Rental amenities that are paid per use/unit
model RentalAmenity {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  pricePerUnit Int    // Price in cents (e.g., ₱200/hour = 20000)
  pricePerHour Int?   // Alternative pricing per hour
  unitType    String   // "hour", "unit", "song", "30minutes", etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    BookingRentalAmenity[]
}

// Cottage add-on option
model Cottage {
  id        Int      @id @default(autoincrement())
  name      String   @default("Cottage")
  price     Int      @default(30000) // ₱300 in cents
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookings  BookingCottage[]
}

model Amenity {
  id          Int     @id @default(autoincrement())
  name        String
  roomId      Int
  description String?
  room        Room    @relation(fields: [roomId], references: [id])
}

model AmenityInventory {
  id        Int              @id @default(autoincrement())
  name      String
  quantity  Int
  updatedAt DateTime         @updatedAt
  bookings  BookingAmenity[]
}

model AmenityCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AmenityLog {
  id          Int      @id @default(autoincrement())
  action      String
  amenityName String
  user        String?
  timestamp   DateTime @default(now())
}

model Booking {
  id            Int              @id @default(autoincrement())
  userId        Int?
  roomId        Int
  checkIn       DateTime
  checkOut      DateTime
  status        BookingStatus    @default(Pending)
  createdAt     DateTime         @default(now())
  heldUntil     DateTime?
  guestName     String           @default("Walk-in Guest")
  paymentStatus PaymentStatus    @default(Pending)
  totalPrice    Int              @default(0)
  room          Room             @relation(fields: [roomId], references: [id])
  user          User?            @relation(fields: [userId], references: [id])
  amenities     BookingAmenity[]
  optionalAmenities BookingOptionalAmenity[]
  rentalAmenities   BookingRentalAmenity[]
  cottage           BookingCottage[]
  payments      Payment[]
}

// Updated booking amenity models for the new system
model BookingOptionalAmenity {
  id                Int             @id @default(autoincrement())
  bookingId         Int
  optionalAmenityId Int
  quantity          Int             @default(1)
  optionalAmenity   OptionalAmenity @relation(fields: [optionalAmenityId], references: [id])
  booking           Booking         @relation(fields: [bookingId], references: [id])

  @@unique([bookingId, optionalAmenityId])
}

model BookingRentalAmenity {
  id              Int           @id @default(autoincrement())
  bookingId       Int
  rentalAmenityId Int
  quantity        Int           @default(1)
  hoursUsed       Int?          // For hourly rentals
  totalPrice      Int           // Calculated price for this rental
  rentalAmenity   RentalAmenity @relation(fields: [rentalAmenityId], references: [id])
  booking         Booking       @relation(fields: [bookingId], references: [id])

  @@unique([bookingId, rentalAmenityId])
}

model BookingCottage {
  id         Int      @id @default(autoincrement())
  bookingId  Int
  cottageId  Int
  quantity   Int      @default(1)
  totalPrice Int      // Calculated price for cottage
  cottage    Cottage  @relation(fields: [cottageId], references: [id])
  booking    Booking  @relation(fields: [bookingId], references: [id])

  @@unique([bookingId, cottageId])
}

model BookingAmenity {
  id                 Int              @id @default(autoincrement())
  bookingId          Int
  amenityInventoryId Int
  amenity            AmenityInventory @relation(fields: [amenityInventoryId], references: [id])
  booking            Booking          @relation(fields: [bookingId], references: [id])
}

model Payment {
  id           String   @id @default(cuid())
  bookingId    Int
  booking      Booking  @relation(fields: [bookingId], references: [id])

  amount       Int      // in cents (₱100 = 10000)
  currency     String   @default("PHP")

  status       PaymentStatus @default(Pending) // pending, paid, failed, refunded
  provider     String   @default("paymongo")

  referenceId  String?  // PayMongo payment ID
  receiptUrl   String?  // PayMongo generated receipt link

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  type      String
  role      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum BookingStatus {
  Confirmed
  Pending
  Cancelled
  Held
}

enum PaymentStatus {
  Paid
  Pending
  Partial
}

enum Role {
  CUSTOMER
  GUEST
  ADMIN
  SUPERADMIN
  RECEPTIONIST
  CASHIER
  AMENITYINVENTORYMANAGER
}

enum RoomType {
  STANDARD
  DELUXE
  SUITE
  BEACHFRONT
  TEPEE
  LOFT
  FAMILY_LODGE
  VILLA
}

enum AmenityType {
  DEFAULT
  OPTIONAL
  RENTAL
}

model ChatbotQA {
  id          Int      @id @default(autoincrement())
  category    String
  question    String   @unique
  answer      String   @db.Text
  hasBookNow  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TrustedBrowser {
  id            Int      @id @default(autoincrement())
  userId        Int
  browserFingerprint String @unique
  userAgent     String?
  ipAddress     String?
  lastUsed      DateTime @default(now())
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
