generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Reschedule request for bookings
model RescheduleRequest {
  id           Int      @id @default(autoincrement())
  bookingId    Int
  userId       Int? // who requested
  requestedAt  DateTime @default(now())
  oldCheckIn   DateTime
  oldCheckOut  DateTime
  newCheckIn   DateTime
  newCheckOut  DateTime
  status       RescheduleStatus @default(PENDING)
  context      String? // guest context for reschedule
  adminContext String? // superadmin context for denial
  decidedAt    DateTime?
  decidedById  Int? // superadmin who decided
  booking      Booking @relation(fields: [bookingId], references: [id])
  user         User?    @relation("RescheduleRequestedBy", fields: [userId], references: [id])
  decidedBy    User?    @relation("RescheduleDecidedBy", fields: [decidedById], references: [id])
}

enum RescheduleStatus {
  PENDING
  APPROVED
  DENIED
}

model User {
  id             Int       @id @default(autoincrement())
  name           String?
  firstName      String
  middleName     String?
  lastName       String
  birthdate      DateTime
  contactNumber  String
  email          String    @unique
  password       String?           // <- optional for OAuth users
  role           Role      @default(CUSTOMER)
  image          String?
  redirectUrl    String?   @default("/guest/dashboard")
  emailVerified  DateTime?
  googleId       String?   @unique  // <- for linking Google OAuth accounts
  pendingGoogleLink String? // Temporary storage for pending Google account linking data
  resetToken     String?   // for password reset OTP
  resetTokenExpiry DateTime? // expiry time for reset OTP
  // Progressive payment failure cooldown
  failedPaymentAttempts Int      @default(0)
  paymentCooldownUntil  DateTime?
  bookings       Booking[]
  accounts       Account[]
  sessions       Session[]
  trustedBrowsers TrustedBrowser[]
  rescheduleRequestsRequested RescheduleRequest[] @relation("RescheduleRequestedBy")
  rescheduleRequestsDecided   RescheduleRequest[] @relation("RescheduleDecidedBy")

  // Relations for cashier verification and remarks
  verifiedPayments Payment[]        @relation("VerifiedPaymentsByUser")
  remarksAuthored  BookingRemark[]  @relation("RemarksAuthored")
  
  // Relations for developer 3D model uploads
  uploadedModels   ThreeDModel[]
  
  // Relations for system logs
  systemLogs       SystemLog[]       @relation("SystemLogUser")
  resolvedLogs     SystemLog[]       @relation("ResolvedLogs")
}

model OTP {
  id             Int      @id @default(autoincrement())
  email          String
  otp            String
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  firstName      String
  middleName     String?
  lastName       String
  birthdate      DateTime
  contactNumber  String
  browserFingerprint String?
  userAgent      String?
  password       String
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String

  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Room {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  type      RoomType
  price     Int
  createdAt DateTime  @default(now())
  heldUntil DateTime?
  status    String    @default("available")
  updatedAt DateTime  @updatedAt
  image     String?
  quantity  Int       @default(1)
  amenities Amenity[]
  bookings  BookingRoom[]
  defaultAmenities RoomTypeDefaultAmenity[]
}

// Default amenities that come with each room type
model RoomTypeDefaultAmenity {
  id          Int      @id @default(autoincrement())
  roomType    RoomType
  amenityName String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  room        Room?    @relation(fields: [roomId], references: [id])
  roomId      Int?

  @@unique([roomType, amenityName])
}

// Optional amenities that can be added to bookings (with quantity limits)
model OptionalAmenity {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  maxQuantity Int      @default(1) // Maximum quantity per booking
  quantity    Int      @default(0) // Total available stock
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    BookingOptionalAmenity[]
}

// Rental amenities that are paid per use/unit
model RentalAmenity {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  pricePerUnit Int    // Price in cents (e.g., ₱200/hour = 20000)
  pricePerHour Int?   // Alternative pricing per hour
  unitType    String   // "hour", "unit", "song", "30minutes", etc.
  unitNote    String?
  isActive    Boolean  @default(true)
  quantity      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    BookingRentalAmenity[]
}

// Cottage add-on option
model Cottage {
  id        Int      @id @default(autoincrement())
  name      String   @default("Cottage")
  price     Int      @default(30000) // ₱300 in cents
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookings  BookingCottage[]
}

model Amenity {
  id          Int     @id @default(autoincrement())
  name        String
  roomId      Int
  description String?
  room        Room    @relation(fields: [roomId], references: [id])
}

model AmenityInventory {
  id        Int              @id @default(autoincrement())
  name      String
  category  String?          @default("General")
  quantity  Int
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  bookings  BookingAmenity[]
}

model AmenityCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AmenityLog {
  id          Int      @id @default(autoincrement())
  action      String
  amenityName String
  user        String?
  timestamp   DateTime @default(now())
}

model Booking {
  id            Int              @id @default(autoincrement())
  userId        Int?
  checkIn       DateTime
  checkOut      DateTime
  actualCheckIn DateTime?
  actualCheckOut DateTime?
  status        BookingStatus    @default(Pending)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt
  heldUntil     DateTime?
  guestName     String           @default("Walk-in Guest")
  paymentStatus PaymentStatus    @default(Pending)
  totalPrice    Int              @default(0)
  numberOfGuests Int             @default(1)
  paymentMode   String           @default("cash") // Required: "cash", "gcash", "maya", "card"
  isDeleted     Boolean          @default(false)
  cancellationRemarks String?
  user          User?            @relation(fields: [userId], references: [id])
  rooms         BookingRoom[]
  amenities     BookingAmenity[]
  optionalAmenities BookingOptionalAmenity[]
  rentalAmenities   BookingRentalAmenity[]
  cottage           BookingCottage[]
  payments      Payment[]
  rescheduleRequests RescheduleRequest[]

  // Internal remarks for coordination
  remarks BookingRemark[] @relation("BookingRemarks")
}

// Updated booking amenity models for the new system
model BookingOptionalAmenity {
  id                Int             @id @default(autoincrement())
  bookingId         Int
  optionalAmenityId Int
  quantity          Int             @default(1)
  optionalAmenity   OptionalAmenity @relation(fields: [optionalAmenityId], references: [id])
  booking           Booking         @relation(fields: [bookingId], references: [id])

  @@unique([bookingId, optionalAmenityId])
}

model BookingRentalAmenity {
  id              Int           @id @default(autoincrement())
  bookingId       Int
  rentalAmenityId Int
  quantity        Int           @default(1)
  hoursUsed       Int?          // For hourly rentals
  totalPrice      Int           // Calculated price for this rental
  rentalAmenity   RentalAmenity @relation(fields: [rentalAmenityId], references: [id])
  booking         Booking       @relation(fields: [bookingId], references: [id])

  @@unique([bookingId, rentalAmenityId])
}

model BookingCottage {
  id         Int      @id @default(autoincrement())
  bookingId  Int
  cottageId  Int
  quantity   Int      @default(1)
  totalPrice Int      // Calculated price for cottage
  cottage    Cottage  @relation(fields: [cottageId], references: [id])
  booking    Booking  @relation(fields: [bookingId], references: [id])

  @@unique([bookingId, cottageId])
}

model BookingRoom {
  bookingId Int
  roomId    Int
  quantity  Int     @default(1)
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@id([bookingId, roomId])
}

model BookingAmenity {
  id                 Int              @id @default(autoincrement())
  bookingId          Int
  amenityInventoryId Int
  amenity            AmenityInventory @relation(fields: [amenityInventoryId], references: [id])
  booking            Booking          @relation(fields: [bookingId], references: [id])
}

model Payment {
  id           String   @id @default(cuid())
  bookingId    Int
  booking      Booking  @relation(fields: [bookingId], references: [id])

  amount       BigInt   // in cents (₱100 = 10000)
  currency     String   @default("PHP")

  status       PaymentStatus @default(Pending) // pending, paid, failed, refunded
  provider     String   @default("paymongo")
  // Explicit payment method (e.g., gcash, paymaya, cash, card, bank_transfer)
  method       String?

  referenceId  String?  // PayMongo payment ID
  receiptUrl   String?  // PayMongo generated receipt link

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Cashier verification workflow
  verificationStatus PaymentVerificationStatus @default(Unverified)
  verifiedById  Int?
  verifiedBy    User?    @relation("VerifiedPaymentsByUser", fields: [verifiedById], references: [id])
  verifiedAt    DateTime?
  flagReason    String?
  receiptNumber String?
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  type      String
  role      String
  bookingId Int?
  userId    Int?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum BookingStatus {
  Confirmed
  Pending
  Cancelled
  Held
  Completed
}

enum PaymentStatus {
  Paid
  Pending
  Partial
  Reservation
  Cancelled
}

// Manual verification state controlled by Cashier/Superadmin
enum PaymentVerificationStatus {
  Unverified
  Verified
  Flagged
}

enum Role {
  CUSTOMER
  GUEST
  ADMIN
  SUPERADMIN
  RECEPTIONIST
  CASHIER
  AMENITYINVENTORYMANAGER
  DEVELOPER
}

enum RoomType {
  STANDARD
  DELUXE
  SUITE
  BEACHFRONT
  TEPEE
  LOFT
  FAMILY_LODGE
  VILLA
}

enum AmenityType {
  DEFAULT
  OPTIONAL
  RENTAL
}

// Internal remarks per booking for coordination between roles
model BookingRemark {
  id         Int      @id @default(autoincrement())
  bookingId  Int
  authorId   Int?
  authorRole Role
  content    String   @db.Text
  createdAt  DateTime @default(now())

  booking    Booking  @relation("BookingRemarks", fields: [bookingId], references: [id])
  author     User?    @relation("RemarksAuthored", fields: [authorId], references: [id])

  @@index([bookingId])
  @@index([authorId])
}

model ChatbotQA {
  id          Int      @id @default(autoincrement())
  category    String
  question    String   @unique
  answer      String   @db.Text
  hasBookNow  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TrustedBrowser {
  id            Int      @id @default(autoincrement())
  userId        Int
  browserFingerprint String @unique
  userAgent     String?
  ipAddress     String?
  lastUsed      DateTime @default(now())
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Promotion {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  image         String?
  discountType  String   // 'percentage' or 'fixed'
  discountValue Int      // in cents, e.g., 10% = 1000, ₱100 = 10000
  targetType    String   // 'booking', 'room', 'amenity'
  isActive      Boolean  @default(true)
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Policy {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Audit trail for administrative actions (admins + superadmin)
model AuditTrail {
  id         Int      @id @default(autoincrement())
  actorId    Int?               // optional link to User when available
  actorName  String
  actorRole  Role
  action     String             // CREATE / UPDATE / DELETE / etc.
  entity     String             // e.g. "Policy", "Room", "Amenity"
  entityId   String?            // optional identifier of the affected entity
  details    String?            @db.Text
  timestamp  DateTime           @default(now())

  @@index([actorId])
  @@index([timestamp])
}

// Track 3D models for the virtual tour system
model ThreeDModel {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  fileName    String   @unique // e.g., "WholeMap_Separated_Textured.gltf"
  filePath    String   // full path in public folder
  fileType    String   // "GLTF" or "OBJ"
  fileSize    Int?     // size in bytes
  isActive    Boolean  @default(false) // only one can be active at a time
  uploadedBy  Int?     // developer who uploaded
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  
  developer   User?    @relation(fields: [uploadedBy], references: [id])
}

// System error logs for developer monitoring
model SystemLog {
  id          Int       @id @default(autoincrement())
  level       LogLevel  // ERROR, WARNING, INFO, DEBUG
  category    String    // API, AUTH, PAYMENT, DATABASE, UPLOAD, etc.
  message     String    @db.Text
  stackTrace  String?   @db.Text
  endpoint    String?   // API route that caused error
  userId      Int?      // User who triggered the error (if applicable)
  userRole    Role?     // Role of the user
  ipAddress   String?
  userAgent   String?
  metadata    Json?     // Additional context data
  timestamp   DateTime  @default(now())
  resolved    Boolean   @default(false)
  resolvedBy  Int?      // Developer who marked as resolved
  resolvedAt  DateTime?
  
  user        User?     @relation("SystemLogUser", fields: [userId], references: [id])
  resolver    User?     @relation("ResolvedLogs", fields: [resolvedBy], references: [id])
  
  @@index([level])
  @@index([category])
  @@index([timestamp])
  @@index([resolved])
}

enum LogLevel {
  ERROR
  WARNING
  INFO
  DEBUG
}
